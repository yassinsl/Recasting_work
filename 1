#include "recaste.h"
#include <mlx.h>
#include <math.h>
#include <stdlib.h>

#define PI 3.1415926535
#define R 128
#define D 192
#define PLAYER 'P'

int ft_strlen(char *str)
{
    int i = 0;
    while (str[i])
        i++;
    return (i);
}

typedef struct s_texture
{
    void *wall;
    void *space;
    void *player_up;
    void *player_lf;
    void *player_do;
    void *player_rg;
    void *collect;
    void *exit;
    void *exit_open;
    int width;
    int height;
} t_texture;

typedef struct me
{
    void *mlx;
    t_texture texture;
    void *win;
    void *img_win;
    char *buffer;
    int size_pixel;
    int size_line;
    int endian;
    int rows, cols;
    int pos_y;
    int pos_x;
    int ray_x;
    int ray_y;
} game;

int manage_key(int keycode, game *g)
{
    if (keycode == 65307) //
        exit(0);
    return (0);
}

void ft_render_map(game *g, char **map)
{
	int ox = (g->texture.width - D)/2;
	int oy = (g->texture.height- D)/2;
    mlx_put_image_to_window(g->mlx, g->win, g->texture.wall, ox, oy);
    (void)map;
}

void get_size_map(char **map, int *row, int *columns)
{
    *row = 0;
    *columns = ft_strlen(map[0]);
    while (map[*row])
        (*row)++;
}

void load_texture(game *g)
{
    g->texture.wall = mlx_xpm_file_to_image(
        g->mlx, "texture/resizeollazbi.xpm",
        &g->texture.width, &g->texture.height
    );
    if (!g->texture.wall)
        exit(3);
}

void render_map(game *g, char **map)
{
    get_size_map(map, &g->rows, &g->cols);
    g->mlx = mlx_init();
    g->texture.width = 350;
    g->texture.height = 350;
    g->win = mlx_new_window(g->mlx, g->texture.width, g->texture.height, "");
    load_texture(g);
    ft_render_map(g, map);
    mlx_key_hook(g->win, manage_key, g);
    mlx_loop(g->mlx);
}

void get_position_player(game *g, char **map)
{
    int i = 0;
    int j;
    while (map[i])
    {
        j = 0;
        while (map[i][j])
        {
            if (map[i][j] == PLAYER)
            {
                g->pos_x = j;
                g->pos_y = i;
                return;
            }
            j++;
        }
        i++;
    }
}

int main(void)
{
    game g = {0};

    char *map[] =
    {
        "1111111111101111",
        "110111X110111111",
        "10P0011111101111",
        "1C10111110111111", // fixed length
        "1111111111111111",
        NULL
    };

    get_position_player(&g, map);
    render_map(&g, map);
}

